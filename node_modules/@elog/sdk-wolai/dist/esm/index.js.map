{"version":3,"sources":["../../src/client.ts","../../src/utils.ts","../../src/core.ts","../../src/index.ts"],"sourcesContent":["import {\n  WoLaiConfig,\n  WoLaiDoc,\n  WolaiFilterAndSortParams,\n  WoLaiTablePage,\n  WoLaiTableRow,\n  WoLaiTableRows,\n} from './types'\nimport { out, request, RequestOptions } from '@elog/shared'\nimport { DocCatalog, DocDetail, DocProperties } from '@elog/types'\nimport asyncPool from 'tiny-async-pool'\nimport { filterDocs, genCatalog, props, sortDocs } from './utils'\nimport * as buffer from 'buffer'\nimport { WolaiSortDirectionEnum, WolaiSortPresetEnum } from './const'\n\n/**\n * WoLaiClient\n */\nclass WoLaiClient {\n  config: WoLaiConfig\n  docList: WoLaiTableRow[] = []\n  catalog: WoLaiTableRow[] = []\n  filterAndSortParams: WolaiFilterAndSortParams\n\n  constructor(config: WoLaiConfig) {\n    this.config = config\n    this.config.baseUrl = config.baseUrl || 'https://api.wolai.com/v1'\n    if (!this.config.token || !this.config.pageId) {\n      out.err('缺少参数', '缺少WoLai配置信息')\n      process.exit(-1)\n    }\n    this.filterAndSortParams = this.initFilterAndSortParamsParams()\n  }\n\n  /**\n   * 初始化过滤和排序参数\n   */\n  initFilterAndSortParamsParams(): WolaiFilterAndSortParams {\n    let sort = this.config.sort as WolaiFilterAndSortParams['sort']\n    if (typeof this.config.sort === 'boolean') {\n      if (!this.config.sort) {\n        // 不排序\n        sort = undefined\n      } else {\n        // 默认排序\n        sort = { property: 'createdAt', direction: WolaiSortDirectionEnum.descending }\n      }\n    } else if (typeof this.config.sort === 'string') {\n      // 预设值\n      const sortPreset = this.config.sort as WolaiSortPresetEnum\n      switch (sortPreset) {\n        case WolaiSortPresetEnum.dateDesc:\n          sort = { property: 'date', direction: WolaiSortDirectionEnum.descending }\n          break\n        case WolaiSortPresetEnum.dateAsc:\n          sort = { property: 'date', direction: WolaiSortDirectionEnum.ascending }\n          break\n        case WolaiSortPresetEnum.sortDesc:\n          sort = { property: 'sort', direction: WolaiSortDirectionEnum.descending }\n          break\n        case WolaiSortPresetEnum.sortAsc:\n          sort = { property: 'sort', direction: WolaiSortDirectionEnum.ascending }\n          break\n        case WolaiSortPresetEnum.createTimeDesc:\n          sort = {\n            property: 'createdAt',\n            direction: WolaiSortDirectionEnum.descending,\n          }\n          break\n        case WolaiSortPresetEnum.createTimeAsc:\n          sort = {\n            property: 'createdAt',\n            direction: WolaiSortDirectionEnum.ascending,\n          }\n          break\n        case WolaiSortPresetEnum.updateTimeDesc:\n          sort = {\n            property: 'updatedAt',\n            direction: WolaiSortDirectionEnum.descending,\n          }\n          break\n        case WolaiSortPresetEnum.updateTimeAsc:\n          sort = {\n            property: 'updatedAt',\n            direction: WolaiSortDirectionEnum.ascending,\n          }\n          break\n        default:\n          sort = {\n            property: 'createdAt',\n            direction: WolaiSortDirectionEnum.descending,\n          }\n      }\n    }\n\n    let filter = this.config.filter as WolaiFilterAndSortParams['filter']\n    // 如果是boolean类型\n    if (typeof this.config.filter === 'boolean') {\n      // 如果设置为false\n      if (!this.config.filter) {\n        filter = undefined\n      } else {\n        // 如果设置为true\n        filter = {\n          property: 'status',\n          value: '已发布',\n        }\n      }\n    }\n    return {\n      filter,\n      sort,\n    }\n  }\n\n  /**\n   * send api request to yuque\n   * @param api\n   * @param reqOpts\n   */\n  async request<T>(api: string, reqOpts: RequestOptions): Promise<T> {\n    const url = `${this.config.baseUrl}/${api}`\n    // 将 token 设置到请求 cookie 中\n    const cookie = `token=${this.config.token}`\n    const opts: RequestOptions = {\n      headers: {\n        cookie: cookie,\n      },\n      ...reqOpts,\n    }\n    const res = await request<any>(url, opts)\n\n    return res.data.data\n  }\n\n  /**\n   * 获取文章列表(不带详情)\n   */\n  async getDocList(): Promise<WoLaiDoc[]> {\n    // 获取表格信息\n    const tablePage = await this.request<WoLaiTablePage>('pages/getPageChunks', {\n      method: 'post',\n      data: {\n        pageId: this.config.pageId,\n        limit: 100,\n        position: {\n          stack: [],\n        },\n        chunkNumber: 0,\n      },\n    })\n    const databaseId = tablePage.block[this.config.pageId].value.database_id\n    // 获取表格文档列表\n    const rows = await this.request<WoLaiTableRows>('database/tableViewRows', {\n      method: 'post',\n      data: {\n        table_id: databaseId,\n        // TODO \"view_id\": \"\",\n        limit: 1000,\n        value: 'all',\n        offset: 0,\n        disableGroup: false,\n        filters: {\n          logical: 'and',\n          filters: [],\n        },\n        sorters: [],\n        group: false,\n        search: '',\n        snapshot: null,\n        timezoneOffset: -480,\n      },\n    })\n    // 转换 props\n    const tableFields = tablePage.database_tables[databaseId].properties\n    let docs = rows.rows.map((row) => {\n      const properties = props(row, tableFields)\n      return {\n        ...row,\n        createdAt: row.created_time,\n        updatedAt: row.edited_time,\n        properties,\n      }\n    })\n    const { filter, sort } = this.filterAndSortParams\n    docs = filterDocs(docs, filter)\n    // 排序\n    docs = sortDocs(docs, sort)\n    // 过滤条件\n    this.catalog = docs\n    this.docList = docs\n    return docs\n  }\n\n  /**\n   * 获取文章详情\n   */\n  async getDocDetail(row: WoLaiDoc): Promise<DocDetail> {\n    const url = await this.request<string>('exportMarkdown', {\n      method: 'post',\n      data: {\n        pageId: row.block_id,\n        pageTitle: row.properties.title,\n        options: {\n          recoverTree: false,\n          generateToc: 'none',\n          includeSubPage: false,\n        },\n      },\n    })\n    // 从 url 下载buffer\n    const res = await request<Buffer>(url, { method: 'get', dataType: 'buffer' })\n    // Buffer 转字符串\n    const body = buffer.Buffer.from(res.data).toString('utf-8')\n\n    const doc = {\n      id: row.block_id,\n      doc_id: row.block_id,\n      properties: row.properties as DocProperties,\n      body,\n      body_original: body,\n      updated: row.edited_time,\n    }\n    let catalog: DocCatalog[] | undefined = []\n    const catalogConfig = this.config.catalog\n    if (catalogConfig?.enable) {\n      // 生成目录\n      catalog = genCatalog(doc, catalogConfig.property || 'catalog')\n    }\n    return {\n      ...doc,\n      catalog,\n    }\n  }\n\n  /**\n   * 获取文章详情列表\n   * @param cachedDocs\n   * @param ids\n   */\n  async getDocDetailList(cachedDocs: WoLaiDoc[], ids: string[]) {\n    let articleList: DocDetail[] = []\n    let docs = cachedDocs\n    if (ids.length) {\n      // 取交集，过滤不需要下载的page\n      docs = docs\n        .filter((doc) => {\n          const exist = ids.indexOf(doc.block_id) > -1\n          if (!exist) {\n            out.info('跳过下载', doc.properties.title)\n          }\n          return exist\n        })\n        .map((item, index) => {\n          return {\n            ...item,\n            _index: index + 1,\n          }\n        })\n    }\n    if (!docs?.length) {\n      out.access('跳过', '没有需要下载的文章')\n      return articleList\n    }\n    out.info('待下载数', String(docs.length))\n    out.access('开始下载文档...')\n    const promise = async (doc: WoLaiDoc) => {\n      out.info(`下载文档 ${doc._index}/${docs.length}   `, doc.properties.title)\n      let article = await this.getDocDetail(doc)\n      articleList.push(article)\n    }\n    await asyncPool(this.config.limit || 3, docs, promise)\n    out.info('已下载数', String(articleList.length))\n    return articleList\n  }\n}\n\nexport default WoLaiClient\n","import {\n  WoLaiDatabaseTableProperty,\n  WoLaiDoc,\n  WolaiFilterItem,\n  WolaiSortItem,\n  WoLaiTableRow,\n} from './types'\nimport { DocProperties, DocCatalog, DocDetail } from '@elog/types'\nimport { timeFormat, out, isTime, getTimes } from '@elog/shared'\nimport { WolaiSortDirectionEnum } from './const'\n\n/**\n * 获取元数据Val\n * @param data\n * @param tableFields\n */\nexport function getPropVal(\n  data: WoLaiTableRow['properties'],\n  tableFields: WoLaiDatabaseTableProperty[],\n) {\n  const properties: any = {}\n  tableFields.forEach((field) => {\n    if (data[field.id]) {\n      switch (field.type) {\n        case 'primary':\n          properties.title = data[field.id][0][0]\n          break\n        case 'date':\n          // 只取开始时间\n          properties[field.name] = data[field.id][0][1][0][2].start_date\n          break\n        case 'multi_select':\n          // 取数组\n          const ids = data[field.id][0][1][0][1]\n          properties[field.name] = field.options.map((opt) => {\n            return ids.includes(opt.option_id) ? opt.value : ''\n          })\n          break\n        case 'checkbox':\n          // 取 boolean\n          properties[field.name] = data[field.id][0][0] === 'True'\n          break\n        case 'file':\n          // TODO 处理文件\n          break\n        case 'select':\n        case 'text':\n        case 'number':\n        case 'url':\n        case 'people':\n        case 'email':\n        case 'phone':\n          properties[field.name] = String(data[field.id][0][0])\n          break\n        default:\n          break\n      }\n    }\n  })\n  return properties\n\n  // let val = data[data.type]\n  // if (!val) return ''\n  // switch (data.type) {\n  //   case 'multi_select':\n  //     return val.map((a: any) => a.name)\n  //   case 'select':\n  //     return val.name\n  //   case 'date':\n  //     return timeFormat(val.start)\n  //   case 'rich_text':\n  //   case 'title':\n  //     return val.map((a: any) => a.plain_text).join('')\n  //   case 'text':\n  //     return data.plain_text\n  //   case 'files':\n  //     if (val.length < 1) return ''\n  //     return val[0][val[0].type].url\n  //   default:\n  //     return val\n  // }\n}\n\n/**\n * 生成元数据\n * @param {*} page\n * @param tableFields\n * @returns {Object}\n */\nexport function props(\n  page: WoLaiTableRow,\n  tableFields: WoLaiDatabaseTableProperty[],\n): DocProperties {\n  let properties: any = {}\n  if (!Object.keys(page.properties).length) return properties\n  // const titleField = tableFields.find((item) => item.type === 'primary')!.id\n  properties = getPropVal(page.properties, tableFields)\n  // if (!properties.cover && page.cover) {\n  //   const type = page.cover.type\n  //   if (type) {\n  //     properties.cover = (page.cover as any)[type].url\n  //   }\n  // }\n  // 单独处理title\n  // if (!properties.title) {\n  //   properties.title = page.properties[titleField][0][0]\n  // }\n  // 单独处理urlname\n  if (!properties.urlname) {\n    properties.urlname = page.block_id\n  }\n  // date\n  if (!properties.date) {\n    properties.date = timeFormat(page.created_time)\n  }\n  if (!properties.updated) {\n    properties.updated = timeFormat(page.edited_time)\n  }\n  return properties\n}\n\nexport function genCatalog(doc: DocDetail, property: string): DocCatalog[] | undefined {\n  const catalog = doc.properties[property]\n  if (!catalog) {\n    out.warning(`${doc.properties.title} ${property} 属性缺失`)\n    return undefined\n  } else if (typeof catalog === 'string') {\n    // 单选\n    return [\n      {\n        title: catalog,\n        doc_id: doc.doc_id,\n      },\n    ]\n  } else if (Array.isArray(catalog)) {\n    // 多选\n    return catalog.map((item) => {\n      return {\n        title: item,\n        doc_id: doc.doc_id,\n      }\n    })\n  } else {\n    // 没有值\n    out.warning(`${doc.properties.title} 文档分类信息提取失败，${property} 字段只能是单选/多选`)\n    return undefined\n  }\n}\n\n/**\n * 文档排序\n * @param docs\n * @param sorts\n */\nexport function sortDocs(docs: WoLaiDoc[], sorts?: WolaiSortItem) {\n  return docs.sort((a, b) => {\n    if (sorts) {\n      let aSortValue = a.properties[sorts.property]\n      let bSortValue = b.properties[sorts.property]\n      const sortDirection = sorts.direction\n      // 如果不存在则不排序\n      if (!aSortValue || !bSortValue) {\n        return 0\n      }\n      // 判断是不是数字\n      if (Number.isNaN(Number(aSortValue)) || Number.isNaN(Number(bSortValue))) {\n        // 如果判断字符串是不是时间\n        if (isTime(aSortValue) && isTime(bSortValue)) {\n          // 将2023/05/08 00:00转成时间戳\n          aSortValue = getTimes(aSortValue)\n          bSortValue = getTimes(bSortValue)\n        } else {\n          // 都不是则排后面\n          return -1\n        }\n      } else {\n        aSortValue = Number(aSortValue)\n        bSortValue = Number(bSortValue)\n      }\n\n      if (sortDirection === WolaiSortDirectionEnum.ascending) {\n        // 正序排序\n        return aSortValue - bSortValue\n      } else if (sortDirection === WolaiSortDirectionEnum.descending) {\n        // 倒序排序\n        return bSortValue - aSortValue\n      } else {\n        // 属性错误\n        return 0\n      }\n    } else {\n      // 不排序\n      return 0\n    }\n  })\n}\n\n/**\n * 文档过滤\n * @param docs\n * @param filter\n */\nexport function filterDocs(docs: WoLaiDoc[], filter?: WolaiFilterItem | WolaiFilterItem[]) {\n  return docs.filter((page) => {\n    const pageProperties = page.properties\n    // 过滤\n    if (filter && Array.isArray(filter)) {\n      return filter.every((f) => {\n        return pageProperties[f.property] === f.value\n      })\n      // 如果是对象\n    } else if (typeof filter === 'object') {\n      return pageProperties[filter.property] === filter.value\n    }\n    // 不过滤\n    return true\n  })\n}\n","import WoLaiClient from './client'\nimport { BaseDoc } from '@elog/types'\nimport { out } from '@elog/shared'\nimport { WoLaiConfig } from './types'\n\n/**\n * Yuque SDK\n */\nclass WoLai {\n  config: WoLaiConfig\n  ctx: WoLaiClient\n  pages: any[] = []\n\n  constructor(options: WoLaiConfig) {\n    this.config = options\n    this.ctx = new WoLaiClient(this.config)\n  }\n\n  /**\n   * list docs of a repo\n   * @return {Promise<DocDetail[]>} return docs\n   */\n  async getDocList(): Promise<BaseDoc[]> {\n    out.info('正在获取文档列表，请稍等...')\n    const pages = await this.ctx.getDocList()\n    this.pages = pages\n    out.info('文档总数', String(this.pages.length))\n    return pages.map((page) => {\n      // 最后更新时间\n      return {\n        // 暂时只需要返回这些属性\n        id: page.block_id,\n        doc_id: page.block_id,\n        updated: page.edited_time,\n      }\n    })\n  }\n\n  /**\n   * 获取文章详情列表\n   * @param ids 需要下载的doc_id列表\n   */\n  async getDocDetailList(ids: string[]) {\n    return await this.ctx.getDocDetailList(this.pages, ids)\n  }\n}\n\nexport default WoLai\n","import WoLai from './core'\nexport * from './types'\n\nexport default WoLai\n"],"mappings":"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","names":["out","out","out","out"]}