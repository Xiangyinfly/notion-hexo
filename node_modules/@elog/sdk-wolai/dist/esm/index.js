var __defProp = Object.defineProperty;
var __defProps = Object.defineProperties;
var __getOwnPropDescs = Object.getOwnPropertyDescriptors;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
var __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));
var __async = (__this, __arguments, generator) => {
  return new Promise((resolve, reject) => {
    var fulfilled = (value) => {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    };
    var rejected = (value) => {
      try {
        step(generator.throw(value));
      } catch (e) {
        reject(e);
      }
    };
    var step = (x) => x.done ? resolve(x.value) : Promise.resolve(x.value).then(fulfilled, rejected);
    step((generator = generator.apply(__this, __arguments)).next());
  });
};

// src/client.ts
import { out as out2, request } from "@elog/shared";
import asyncPool from "tiny-async-pool";

// src/utils.ts
import { timeFormat, out, isTime, getTimes } from "@elog/shared";
function getPropVal(data, tableFields) {
  const properties = {};
  tableFields.forEach((field) => {
    if (data[field.id]) {
      switch (field.type) {
        case "primary":
          properties.title = data[field.id][0][0];
          break;
        case "date":
          properties[field.name] = data[field.id][0][1][0][2].start_date;
          break;
        case "multi_select":
          const ids = data[field.id][0][1][0][1];
          properties[field.name] = field.options.map((opt) => {
            return ids.includes(opt.option_id) ? opt.value : "";
          });
          break;
        case "checkbox":
          properties[field.name] = data[field.id][0][0] === "True";
          break;
        case "file":
          break;
        case "select":
        case "text":
        case "number":
        case "url":
        case "people":
        case "email":
        case "phone":
          properties[field.name] = String(data[field.id][0][0]);
          break;
        default:
          break;
      }
    }
  });
  return properties;
}
function props(page, tableFields) {
  let properties = {};
  if (!Object.keys(page.properties).length)
    return properties;
  properties = getPropVal(page.properties, tableFields);
  if (!properties.urlname) {
    properties.urlname = page.block_id;
  }
  if (!properties.date) {
    properties.date = timeFormat(page.created_time);
  }
  if (!properties.updated) {
    properties.updated = timeFormat(page.edited_time);
  }
  return properties;
}
function genCatalog(doc, property) {
  const catalog = doc.properties[property];
  if (!catalog) {
    out.warning(`${doc.properties.title} ${property} \u5C5E\u6027\u7F3A\u5931`);
    return void 0;
  } else if (typeof catalog === "string") {
    return [
      {
        title: catalog,
        doc_id: doc.doc_id
      }
    ];
  } else if (Array.isArray(catalog)) {
    return catalog.map((item) => {
      return {
        title: item,
        doc_id: doc.doc_id
      };
    });
  } else {
    out.warning(`${doc.properties.title} \u6587\u6863\u5206\u7C7B\u4FE1\u606F\u63D0\u53D6\u5931\u8D25\uFF0C${property} \u5B57\u6BB5\u53EA\u80FD\u662F\u5355\u9009/\u591A\u9009`);
    return void 0;
  }
}
function sortDocs(docs, sorts) {
  return docs.sort((a, b) => {
    if (sorts) {
      let aSortValue = a.properties[sorts.property];
      let bSortValue = b.properties[sorts.property];
      const sortDirection = sorts.direction;
      if (!aSortValue || !bSortValue) {
        return 0;
      }
      if (Number.isNaN(Number(aSortValue)) || Number.isNaN(Number(bSortValue))) {
        if (isTime(aSortValue) && isTime(bSortValue)) {
          aSortValue = getTimes(aSortValue);
          bSortValue = getTimes(bSortValue);
        } else {
          return -1;
        }
      } else {
        aSortValue = Number(aSortValue);
        bSortValue = Number(bSortValue);
      }
      if (sortDirection === "ascending" /* ascending */) {
        return aSortValue - bSortValue;
      } else if (sortDirection === "descending" /* descending */) {
        return bSortValue - aSortValue;
      } else {
        return 0;
      }
    } else {
      return 0;
    }
  });
}
function filterDocs(docs, filter) {
  return docs.filter((page) => {
    const pageProperties = page.properties;
    if (filter && Array.isArray(filter)) {
      return filter.every((f) => {
        return pageProperties[f.property] === f.value;
      });
    } else if (typeof filter === "object") {
      return pageProperties[filter.property] === filter.value;
    }
    return true;
  });
}

// src/client.ts
import * as buffer from "buffer";
var WoLaiClient = class {
  constructor(config) {
    this.docList = [];
    this.catalog = [];
    this.config = config;
    this.config.baseUrl = config.baseUrl || "https://api.wolai.com/v1";
    if (!this.config.token || !this.config.pageId) {
      out2.err("\u7F3A\u5C11\u53C2\u6570", "\u7F3A\u5C11WoLai\u914D\u7F6E\u4FE1\u606F");
      process.exit(-1);
    }
    this.filterAndSortParams = this.initFilterAndSortParamsParams();
  }
  /**
   * 初始化过滤和排序参数
   */
  initFilterAndSortParamsParams() {
    let sort = this.config.sort;
    if (typeof this.config.sort === "boolean") {
      if (!this.config.sort) {
        sort = void 0;
      } else {
        sort = { property: "createdAt", direction: "descending" /* descending */ };
      }
    } else if (typeof this.config.sort === "string") {
      const sortPreset = this.config.sort;
      switch (sortPreset) {
        case "dateDesc" /* dateDesc */:
          sort = { property: "date", direction: "descending" /* descending */ };
          break;
        case "dateAsc" /* dateAsc */:
          sort = { property: "date", direction: "ascending" /* ascending */ };
          break;
        case "sortDesc" /* sortDesc */:
          sort = { property: "sort", direction: "descending" /* descending */ };
          break;
        case "sortAsc" /* sortAsc */:
          sort = { property: "sort", direction: "ascending" /* ascending */ };
          break;
        case "createTimeDesc" /* createTimeDesc */:
          sort = {
            property: "createdAt",
            direction: "descending" /* descending */
          };
          break;
        case "createTimeAsc" /* createTimeAsc */:
          sort = {
            property: "createdAt",
            direction: "ascending" /* ascending */
          };
          break;
        case "updateTimeDesc" /* updateTimeDesc */:
          sort = {
            property: "updatedAt",
            direction: "descending" /* descending */
          };
          break;
        case "updateTimeAsc" /* updateTimeAsc */:
          sort = {
            property: "updatedAt",
            direction: "ascending" /* ascending */
          };
          break;
        default:
          sort = {
            property: "createdAt",
            direction: "descending" /* descending */
          };
      }
    }
    let filter = this.config.filter;
    if (typeof this.config.filter === "boolean") {
      if (!this.config.filter) {
        filter = void 0;
      } else {
        filter = {
          property: "status",
          value: "\u5DF2\u53D1\u5E03"
        };
      }
    }
    return {
      filter,
      sort
    };
  }
  /**
   * send api request to yuque
   * @param api
   * @param reqOpts
   */
  request(api, reqOpts) {
    return __async(this, null, function* () {
      const url = `${this.config.baseUrl}/${api}`;
      const cookie = `token=${this.config.token}`;
      const opts = __spreadValues({
        headers: {
          cookie
        }
      }, reqOpts);
      const res = yield request(url, opts);
      return res.data.data;
    });
  }
  /**
   * 获取文章列表(不带详情)
   */
  getDocList() {
    return __async(this, null, function* () {
      const tablePage = yield this.request("pages/getPageChunks", {
        method: "post",
        data: {
          pageId: this.config.pageId,
          limit: 100,
          position: {
            stack: []
          },
          chunkNumber: 0
        }
      });
      const databaseId = tablePage.block[this.config.pageId].value.database_id;
      const rows = yield this.request("database/tableViewRows", {
        method: "post",
        data: {
          table_id: databaseId,
          // TODO "view_id": "",
          limit: 1e3,
          value: "all",
          offset: 0,
          disableGroup: false,
          filters: {
            logical: "and",
            filters: []
          },
          sorters: [],
          group: false,
          search: "",
          snapshot: null,
          timezoneOffset: -480
        }
      });
      const tableFields = tablePage.database_tables[databaseId].properties;
      let docs = rows.rows.map((row) => {
        const properties = props(row, tableFields);
        return __spreadProps(__spreadValues({}, row), {
          createdAt: row.created_time,
          updatedAt: row.edited_time,
          properties
        });
      });
      const { filter, sort } = this.filterAndSortParams;
      docs = filterDocs(docs, filter);
      docs = sortDocs(docs, sort);
      this.catalog = docs;
      this.docList = docs;
      return docs;
    });
  }
  /**
   * 获取文章详情
   */
  getDocDetail(row) {
    return __async(this, null, function* () {
      const url = yield this.request("exportMarkdown", {
        method: "post",
        data: {
          pageId: row.block_id,
          pageTitle: row.properties.title,
          options: {
            recoverTree: false,
            generateToc: "none",
            includeSubPage: false
          }
        }
      });
      const res = yield request(url, { method: "get", dataType: "buffer" });
      const body = buffer.Buffer.from(res.data).toString("utf-8");
      const doc = {
        id: row.block_id,
        doc_id: row.block_id,
        properties: row.properties,
        body,
        body_original: body,
        updated: row.edited_time
      };
      let catalog = [];
      const catalogConfig = this.config.catalog;
      if (catalogConfig == null ? void 0 : catalogConfig.enable) {
        catalog = genCatalog(doc, catalogConfig.property || "catalog");
      }
      return __spreadProps(__spreadValues({}, doc), {
        catalog
      });
    });
  }
  /**
   * 获取文章详情列表
   * @param cachedDocs
   * @param ids
   */
  getDocDetailList(cachedDocs, ids) {
    return __async(this, null, function* () {
      let articleList = [];
      let docs = cachedDocs;
      if (ids.length) {
        docs = docs.filter((doc) => {
          const exist = ids.indexOf(doc.block_id) > -1;
          if (!exist) {
            out2.info("\u8DF3\u8FC7\u4E0B\u8F7D", doc.properties.title);
          }
          return exist;
        }).map((item, index) => {
          return __spreadProps(__spreadValues({}, item), {
            _index: index + 1
          });
        });
      }
      if (!(docs == null ? void 0 : docs.length)) {
        out2.access("\u8DF3\u8FC7", "\u6CA1\u6709\u9700\u8981\u4E0B\u8F7D\u7684\u6587\u7AE0");
        return articleList;
      }
      out2.info("\u5F85\u4E0B\u8F7D\u6570", String(docs.length));
      out2.access("\u5F00\u59CB\u4E0B\u8F7D\u6587\u6863...");
      const promise = (doc) => __async(this, null, function* () {
        out2.info(`\u4E0B\u8F7D\u6587\u6863 ${doc._index}/${docs.length}   `, doc.properties.title);
        let article = yield this.getDocDetail(doc);
        articleList.push(article);
      });
      yield asyncPool(this.config.limit || 3, docs, promise);
      out2.info("\u5DF2\u4E0B\u8F7D\u6570", String(articleList.length));
      return articleList;
    });
  }
};
var client_default = WoLaiClient;

// src/core.ts
import { out as out3 } from "@elog/shared";
var WoLai = class {
  constructor(options) {
    this.pages = [];
    this.config = options;
    this.ctx = new client_default(this.config);
  }
  /**
   * list docs of a repo
   * @return {Promise<DocDetail[]>} return docs
   */
  getDocList() {
    return __async(this, null, function* () {
      out3.info("\u6B63\u5728\u83B7\u53D6\u6587\u6863\u5217\u8868\uFF0C\u8BF7\u7A0D\u7B49...");
      const pages = yield this.ctx.getDocList();
      this.pages = pages;
      out3.info("\u6587\u6863\u603B\u6570", String(this.pages.length));
      return pages.map((page) => {
        return {
          // 暂时只需要返回这些属性
          id: page.block_id,
          doc_id: page.block_id,
          updated: page.edited_time
        };
      });
    });
  }
  /**
   * 获取文章详情列表
   * @param ids 需要下载的doc_id列表
   */
  getDocDetailList(ids) {
    return __async(this, null, function* () {
      return yield this.ctx.getDocDetailList(this.pages, ids);
    });
  }
};
var core_default = WoLai;

// src/index.ts
var src_default = core_default;
export {
  src_default as default
};
//# sourceMappingURL=index.js.map